import numpy as np
import pandas as pd
import fastdtw
import os

def data_import(path='D:/data/sp500/summary.csv'):
    data = pd.read_csv(path)
    data = data.drop(columns='summary')   
    train_data = data[0:1500]
    test_data = data[1500:data.shape[0]]    
    return train_data, test_data

def scaler_fit(data):
    col_name = data.columns
    scaling = {}
    for ticket in col_name:
        scaling[ticket] = np.mean(data[ticket])
    return scaling

def scaler_transform(data, scaler, inverse=False):
    if inverse:
        for element in data.columns:
            data[element] = data[element]*scaler[element]
        return data.reset_index(drop=True)
    else:
        for element in data.columns:
            data[element] = data[element]/scaler[element]
        return data.reset_index(drop=True)

def data_preprocess(train_data, test_data):
    scaler = scaler_fit(train_data)
    norm_train_data = scaler_transform(train_data, scaler)
    norm_test_data = scaler_transform(test_data, scaler)
    return norm_train_data, norm_test_data, scaler

def combination(list):
    output = []
    for i in range(len(list)-1):
        for j in range(len(list)-i-1):
            output.append([list[i], list[i+j+1]])
    return output

def find_pair(data, criteria=50, test_mode=False):
    column_list = data.columns.to_list()
    test_pair = combination(column_list)
    dist = []

    for pair in test_pair:
        stock1 = data[pair[0]].dropna()
        stock2 = data[pair[1]].dropna()
        dwt_dist = fastdtw.fastdtw(stock1, stock2)[0]
        
        if dwt_dist < criteria:
            print('finished' + str(pair) + str(dwt_dist))
            dist.append([dwt_dist, pair[0], pair[1]])
            
        if (len(dist) > 10) & test_mode:
            return dist

    return dist

def enter(price_a, price_b, direction, bet=10000):
    if direction:
        long_position = bet/price_b[1]
        short_position = bet/price_a[1]
        return [price_b[0], long_position, price_a[0], short_position, 0, price_b[1], price_a[1]]
    
    else:
        long_position = bet/price_a[1]
        short_position = bet/price_b[1]
        return [price_a[0], long_position, price_b[0], short_position, 0, price_a[1], price_b[1]]

def close(record, current_value):

    close_long_position = record[1] * current_value[1]
    close_short_position = record[3] * current_value[0]
    equity = close_long_position - close_short_position

    return [record[2], record[3], record[0], record[1], equity, current_value[1], current_value[0]]
    
def trade_execute(norm_test_data, trade_pair, scaler, gap=0.1):
    
    stock1 = norm_test_data[trade_pair[0]]
    stock2 = norm_test_data[trade_pair[1]]
    test_data = scaler_transform(norm_test_data, scaler, inverse=True)
    stock1_price = test_data[trade_pair[0]]
    stock2_price = test_data[trade_pair[1]]

    bet = 10000
    in_position = False
    trade_record = pd.DataFrame(columns=['long', 'unit_long', 'short', 'unit_short', 'return', 'price_long', 'price_short'])

    for i in range(1, len(stock1)):

        direction_before = bool(stock1[i-1] >= stock2[i-1])
        direction = bool(stock1[i] >= stock2[i])

        #not in position, gap large
        if (abs(stock1[i] - stock2[i]) > gap) & (not in_position):
            in_position = True
            record = enter([trade_pair[0], stock1_price[i]], [trade_pair[1], stock2_price[i]], direction, bet)
            df_record = pd.DataFrame([record], columns=['long', 'unit_long', 'short', 'unit_short', 'return', 'price_long', 'price_short'])
            trade_record = pd.concat([trade_record, df_record])

        #in position, price cross
        if in_position & (direction_before != direction):
            in_position = False
            current_value = [stock1_price[i], stock2_price[i]] if direction_before else [stock2_price[i], stock1_price[i]]
            close_record = close(record, current_value)
            df_crecord = pd.DataFrame([close_record], columns=['long', 'unit_long', 'short', 'unit_short', 'return', 'price_long', 'price_short'])
            trade_record = pd.concat([trade_record, df_crecord])

        #in postion, forcibly liquidate when time end
        if in_position & (i == len(stock1)-1):
            current_value = [stock1_price[i], stock2_price[i]] if direction_before else [stock2_price[i], stock1_price[i]]
            close_record = close(record, current_value)
            df_crecord = pd.DataFrame([close_record], columns=['long', 'unit_long', 'short', 'unit_short', 'return', 'price_long', 'price_short'])
            trade_record = pd.concat([trade_record, df_crecord])

    trade_record.to_csv("D:/data/trade_review/" + trade_pair[0] + '&' + trade_pair[1] + ".csv", index=False)

    return pd.DataFrame(trade_record)

def review(data, obs_list):
    coll_count = []
    for pair in obs_list:
        stock1 = data[pair[1]]
        stock2 = data[pair[2]]
        count_tmp = 0
        for i in range(1, len(stock1)):
            now = bool(stock1[i] >= stock2[i])
            before = bool(stock1[i-1] >= stock2[i-1])
            if now != before:
                count_tmp += 1
        coll_count.append([count_tmp, pair[1], pair[2]])
    return coll_count

############################
def main():
    ### pre
    train_data, test_data = data_import()
    norm_train_data, norm_test_data, scaler = data_preprocess(train_data, test_data)

    ###
    obs_list = find_pair(norm_train_data, criteria=50)
    
    for trade_pair in obs_list:
        trade_pair = trade_pair[1:3]
        tmp = trade_execute(norm_test_data.copy(), trade_pair, scaler, gap=0.1)
        print(tmp)

    return 0

##########################
main()
